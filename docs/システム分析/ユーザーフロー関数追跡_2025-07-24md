ナレッジベース生成フロー詳細追跡レポート

  作成日: 2025-07-23対象: 新ナレッジベース起点生成システム範囲: UI選択からコンテンツ表示完了まで

  ---
  📊 システムフロー概要

  UI選択 → ペルソナマッピング → AI判定 → ナレッジ選択 → ページ構造決定 → 個別ページ生成（×9回） → UI表示

  ---
  🔍 ステップ別詳細フロー

  ステップ1: UI選択処理

  場所: KnowledgeBaseSelector.tsx

  1.1 投稿タイプ選択

  - 関数: handleTypeSelect()
  - 処理: ユーザーが投稿タイプ（001-004）を選択
  - データ変換: UIの選択値をselectionState.typeIdに格納
  - 次処理: ターゲット選択画面に遷移

  1.2 ターゲット選択

  - 関数: handleTargetSelect()
  - 処理: 投稿タイプに応じたターゲット選択肢を表示
  - データ変換: 選択されたターゲットIDをselectionState.targetIdに格納
  - 副作用: useEffectでペルソナIDマッピングを実行

  1.3 ペルソナマッピング実行

  - 関数: useEffect（targetId変更時）
  - 処理: MasterDataService.getPersonasForTarget()を呼び出し
  - データ変換: TargetID（T001-T012）→ PersonaIDs（P001-P116）への変換
  - 結果: currentPersonas配列に複数のペルソナIDが格納

  1.4 選択完了通知

  - 関数: useEffect（依存関係: selectionState, currentPersonas）
  - 処理: 親コンポーネントに選択結果を通知
  - 送信データ: KnowledgeBaseParamsオブジェクト
    - typeId: 投稿タイプ
    - targetId: ターゲットID
    - personaIds: マッピングされたペルソナID配列
    - useKnowledgeBase: true

  ---
  ステップ2: コンテンツ入力処理

  場所: ContentInput.tsx

  2.1 パラメータ受信

  - 関数: コンポーネントprops
  - 受信データ: KnowledgeBaseParams（ステップ1.4の結果）
  - 格納: knowledgeBaseParamsstate に保存

  2.2 ナレッジID取得

  - トリガー: handleSubmit()実行時
  - 関数: MasterDataService.getKnowledgeIdsForPersonas()
  - 処理: ペルソナID配列からナレッジID配列への変換
  - 例: [P006, P008, P010] → [K008, K015, K023]

  2.3 ナレッジ内容取得

  - 関数: MasterDataService.getKnowledgeContents()
  - 処理: ナレッジIDから実際のナレッジ内容を取得
  - データソース: app/data/knowledgeBase/knowledge/*.json
  - 結果: ナレッジオブジェクト配列（problemDescription, solutionContent等を含む）

  2.4 AI判定による関連ナレッジ選択

  - 関数: KnowledgeMatchingService.findRelevantKnowledge()
  - 入力: ユーザー入力テキスト + 取得したナレッジ内容
  - 処理: AIがユーザー入力に最も関連するナレッジを判定
  - 選択方式: トップスコア選択（最高スコアの1件のみ）
  - 出力: 選択されたナレッジID

  2.5 拡張パラメータ作成

  - 処理: AI選択結果を用いて最終的なパラメータを構築
  - 作成データ: enhancedParams
    - 元のknowledgeBaseParamsを継承
    - knowledgeIds: AI選択されたナレッジID配列
    - knowledgeContents: 対応するナレッジ内容配列
    - knowledgeData: 選択されたナレッジ（配列の先頭要素）

  2.6 親コンポーネント呼び出し

  - 関数: onSubmit(content, enhancedParams)
  - 渡すデータ: ユーザー入力テキスト + 拡張パラメータ

  ---
  ステップ3: メイン生成処理開始

  場所: NewFlowPostGenerator.tsx

  3.1 コンテンツ生成サービス呼び出し

  - 関数: contentGeneratorService.generateHighQualityContent()
  - 引数:
    - userInput: ユーザー入力テキスト
    - knowledgeBaseParams: 拡張パラメータ（ステップ2.5の結果）

  ---
  ステップ4: 生成フロー分岐

  場所: contentGeneratorService.ts

  4.1 ナレッジベースシステム検出

  - 判定条件: knowledgeBaseParams?.useKnowledgeBase && knowledgeBaseParams.knowledgeContents
  - 処理: 従来フローをスキップし、ナレッジベース起点フローに分岐

  4.2 新ナレッジベース起点システム判定

  - 判定条件: knowledgeBaseParams.knowledgeContents[0].pageStructurePattern
  - 処理: pageStructurePatternが存在する場合、新システムを実行
  - 関数呼び出し: generateWithKnowledgeBase()

  ---
  ステップ5: ページ構造決定

  場所: contentGeneratorService.ts - generateWithKnowledgeBase()

  5.1 ページ構造パターン取得

  - データソース: 選択されたナレッジのpageStructurePatternプロパティ
  - 例: "problem-solution-carousel-9page"

  5.2 ページ構造定義読み込み

  - 関数: PageStructureMatcher.loadPageStructure()
  - 処理: パターン名に対応するページ構造JSONファイルを読み込み
  - ファイル例: problem-solution-carousel-9page.json
  - 取得内容: 9ページ分の構造定義（templateId, role, itemAssignments）

  ---
  ステップ6: 個別ページ生成（問題箇所）

  場所: contentGeneratorService.ts

  6.1 ページ毎のループ処理

  - 処理方式: forループで各ページを順次処理
  - ループ回数: 9回（9ページ構成の場合）
  - 生成器: KnowledgeBasedContentGeneratorのインスタンス作成

  6.2 各ページでのAI生成呼び出し

  - 関数: generator.generatePageContent()
  - 引数:
    - userInput: ユーザー入力
    - knowledgeData: 選択されたナレッジ内容
    - pageStructure: ページ構造定義
    - templateStructure: pageInfo.templatePattern（未定義のため undefined）
    - pageNumber: 現在のページ番号

  ---
  ステップ7: AI生成実行

  場所: KnowledgeBasedContentGenerator.ts

  7.1 プロンプト構築

  - 関数: buildKnowledgeBasedPrompt()
  - 処理: ナレッジ内容とページ構造を基にプロンプト作成
  - 問題: templatePatternが未定義のため、適切な生成構造が指定されない

  7.2 Gemini API呼び出し

  - モデル: gemini-1.5-flash
  - 実行回数: 各ページごと（9回）
  - 問題: 一括生成ではなく個別生成によるコスト増大

  7.3 レスポンス解析

  - 関数: parseGeneratedContent()
  - 処理: JSON形式のレスポンスをパース
  - 問題: テンプレート構造未定義により、期待した構造でデータが生成されない

  ---
  ステップ8: 結果統合

  場所: contentGeneratorService.ts

  8.1 ページ結果収集

  - 処理: 各ページの生成結果をpages配列に格納
  - データ形式: GeneratedPageオブジェクト

  8.2 最終コンテンツ構築

  - 処理: ハッシュタグ・キャプション生成
  - 戻り値: GeneratedContentオブジェクト

  ---
  ステップ9: UI表示

  場所: NewFlowPostGenerator.tsx

  9.1 結果受信

  - 処理: 生成完了後のGeneratedContentを受信
  - 状態更新: generatedContentstateに格納

  9.2 画面レンダリング

  - コンポーネント: PostPreviewに結果を渡して表示
  - 問題: templatePatternが未定義のため、UIに正しく表示されない（undefined表示）

  ---
  🚨 特定された問題点

  1. 非効率な生成方式

  - 問題: ページごとの個別生成（9回のAPI呼び出し）
  - 影響: コスト9倍、生成時間増大、一貫性欠如

  2. テンプレート構造未定義

  - 問題: pageInfo.templatePatternが存在しない
  - 影響: AI生成時の構造指定不可、適切なJSON生成失敗

  3. データ構造不一致

  - 問題: 生成データ（具体的手順、提供情報、実用的なアドバイス）とテンプレート期待値の相違
  - 影響: UIでの表示失敗（undefined表示）

  ---
  🎯 解決すべき優先課題

  1. 緊急: templatePatternの定義追加
  2. 緊急: 一括生成システムの実装
  3. 高: データ構造の統一
  4. 中: エラーハンドリングの改善

● Update Todos
  ⎿  ☒ Examine current problem-solution-carousel-9page.json template structure
     ☒ Analyze actual AI-generated data format from logs/code
     ☒ Check if content generation is per-page or batch
     ☒ Trace detailed knowledge base generation flow from UI to completion
     ☐ Fix template structure to match generated data format
     ☐ Test UI display after template fix

● 📋 まとめ

  現在のナレッジベース生成システムは9つのステップで構成され、ステップ6-7で個別ページ生成による非効率性と、テンプレート構造未定義に
  よる表示問題が発生しています。